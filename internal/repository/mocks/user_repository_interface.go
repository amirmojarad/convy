// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	repository "convy/internal/repository"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, req
func (_m *UserRepository) CreateUser(ctx context.Context, req repository.UserModel) (repository.UserModel, error) {
	ret := _m.Called(ctx, req)

	var r0 repository.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.UserModel) (repository.UserModel, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.UserModel) repository.UserModel); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(repository.UserModel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.UserModel) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, req
func (_m *UserRepository) GetUser(ctx context.Context, req repository.GetUserRequest) (repository.UserModel, error) {
	ret := _m.Called(ctx, req)

	var r0 repository.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.GetUserRequest) (repository.UserModel, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.GetUserRequest) repository.UserModel); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(repository.UserModel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.GetUserRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
